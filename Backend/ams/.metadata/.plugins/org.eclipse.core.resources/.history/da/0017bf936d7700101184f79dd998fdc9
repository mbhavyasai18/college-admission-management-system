package com.cognizant.ams.Model.DAO.ServiceImpl;

import com.cognizant.ams.Model.BAO.FeeInstallmentDTO;
import com.cognizant.ams.Model.BAO.FeePaymentDTO;
import com.cognizant.ams.Model.BAO.FeeSummaryDTO;
import com.cognizant.ams.Model.DAO.Services.FeesService;
import com.cognizant.ams.Model.Exceptions.FeeRecordNotFoundException;
import com.cognizant.ams.Model.POJO.CourseMaster; // Import CourseMaster
import com.cognizant.ams.Model.POJO.FeesDetails;
import com.cognizant.ams.Model.POJO.StudentRegistration;
import com.cognizant.ams.Model.Repositories.FeesDetailsRepository;
import com.cognizant.ams.Model.Repositories.StudentRegistrationRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
public class FeesServiceImpl implements FeesService {

    @Autowired
    private FeesDetailsRepository feesRepo;

    @Autowired
    private StudentRegistrationRepository studentRepo;

    @Override
    public FeeSummaryDTO getFeeSummary(String studentID) {
        StudentRegistration student = studentRepo.findById(studentID)
                .orElseThrow(() -> new FeeRecordNotFoundException("Student not found with ID: " + studentID));

        List<FeesDetails> feesList = feesRepo.findByStudentRegistration_StudentID(studentID);
        int totalPaid = feesList.stream().mapToInt(FeesDetails::getPaidAmount).sum();

        // --- THIS IS THE FIX ---
        // Course lekapothe, totalDue ni 0 ga chupiddam
        int totalDue = 0;
        CourseMaster course = student.getCourse();
        if (course != null) {
            totalDue = course.getTotalFees() - totalPaid;
        }

        List<FeeInstallmentDTO> installments = feesList.stream()
                .map(f -> new FeeInstallmentDTO(
                        f.getFeeID(),
                        f.getInstallmentNo(),
                        f.getPaidAmount(),
                        f.getPaymentDate()
                ))
                .collect(Collectors.toList());

        return new FeeSummaryDTO(studentID, totalPaid, totalDue, installments);
    }

    // ... payInstallment method remains the same ...
}