package com.userauth_services.userauth_services.Model.Pojo;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.Data;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails; // Import this
import java.util.Collection;
import java.util.Collections;

@Entity
@Table(name = "tblUser_Login")
@Data
public class OurUsers implements UserDetails { // Implement the interface here
    @Id
    @Column(name = "UserID")
    private String userID;
    @Column(name = "Username")
    private String username;
    @Column(name = "Password")
    private String password;
    @Column(name = "Role")
    private String role;

    // --- Methods Required by UserDetails Interface ---

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        // This converts the user's role (e.g., "Admin") into a format Spring Security understands.
        return Collections.singleton(new SimpleGrantedAuthority(role));
    }

    // The getUsername() and getPassword() methods are already provided by Lombok's @Data

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
}